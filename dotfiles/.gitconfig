#
# Copyright (C) 2008-2016 David Jia Wei Li
#
# .gitconfig Configuration for Primary Machines
#


[alias]
    # Colorful commit log
    nicelog = log --pretty=format:'%C(red)%h%C(yellow) %an%Creset %s'

    # Another version of nicelog
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

    # Version of git ls with line edit counts
    ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

    # Nicer dates
    lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short

    # Using relative dates
    ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

    # Show line edits
    lc = log ORIG_HEAD.. --stat --no-merges

    # Show changes in working directory
    changes = diff --name-status -r

    # Show stats about changes in working directory
    diffstat = diff --stat -r

    # Show commit graph
    hist = log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short

    # Another version of nicelog
    ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

    # Show type of hash
    type = cat-file -t

    # Dump contents of hash
    dump = cat-file -p

    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit

    # View the current working tree status using the short format
    s = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -avs

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Find commits by blob
    find-blob = "!f() { cd \"$(git rev-parse --show-toplevel)\"; git rev-list --all | xargs -n1 -iX sh -c \"git ls-tree -r X | grep \\\"blob $1\\\" && echo \\\"\\033[1;31mX\\033[0;37m\\\" && echo \"; }; f"

    # Find large objects
    large-objects = "!f() { ( cd \"$(git rev-parse --show-toplevel)/.git/objects\"; find . -type f | xargs du -h --max-depth=0 | sort -h | tail -n ${1:-10}); }; f"

    # Find large packed objects
    # Adapted from https://stubbisms.wordpress.com/2009/07/10/git-script-to-show-largest-pack-objects-and-trim-your-waist-line/
    large-packed = "!f() { \
        cd \"$(git rev-parse --show-toplevel)/.git/objects\"; \
        IFS=$'\n'; \
        objects=$(git verify-pack -v pack/pack-*.idx | grep -v chain | sort -k3n | tail -n ${1:-10}); \
        output='bytes,packed,SHA1,path'; \
        allObjects=$(git rev-list --all --objects); \
        for y in $objects; do \
            size=$(echo $y | cut -f 5 -d ' '); \
            compressedSize=$(echo $y | cut -f 6 -d ' '); \
            sha=$(echo $y | cut -f 1 -d ' '); \
            other=$(echo \"$allObjects\" | grep $sha); \
            output=\"$output\\n$size,$compressedSize,$other\"; \
        done; \
        echo $output | column -t -s ', '; \
    }; f"

    # Remove branches that have already been merged with master
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # List orphaned commits
    orphank = !gitk --all `git reflog | cut -c1-7`&

    # Undo the previous commit, but keep changes in working directory
    undo = reset HEAD~1 --mixed

    # Given a merge commit, find the span of commits that exist(ed) on that
    # branch. Again, not so useful in itself, but used by other aliases.
    # From https://gist.github.com/robmiller/6018582
    merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

    # Find commits that introduced by a merge
    merge-log = "!git log `git merge-span .. $1`"

    # Show the changes that were introduced by a merge
    merge-diff = "!git diff `git merge-span ... $1`"

    # As above, but in your difftool
    merge-difftool = "!git difftool `git merge-span ... $1`"

    # Unstages all files
    unstage = reset HEAD

    # Show stage
    diffc = diff --cached


[user]
    name = RandomBK
    email = david@david-li.com
    signingkey = DA351167

[core]
    autocrlf = input
    hidedotfiles = true
    abbrev = 12
    editor = vim

[color]
    ui = auto

[color "branch"]
    current = yellow bold
    local = green bold
    remote = cyan bold

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse

[color "status"]
    added = green bold
    changed = yellow bold
    untracked = red bold

[diff]
    external = /home/randombk/.bin/melddiff
    tool = meld

[help]
    autocorrect = 50 # Autofix mistyped commands

[pretty]
    fixes = Fixes: %h (\"%s\")

[merge]
    tool = meld
    conflictstyle = diff3
    log = true # Summarize merged commits in messages

[mergetool "meld"]
    cmd = meld --output $MERGED $LOCAL $BASE $REMOTE --diff $LOCAL $BASE --diff $REMOTE $BASE

[push]
    default = simple

[gpg]
    program = gpg2

[difftool]
    prompt = false

[mergetool]
    keepBackup = false

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    required = true
